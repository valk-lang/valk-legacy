
use io
use os

fn gc_bump_alloc(size: uint) ptr {
    return stack.bump.alloc(size)
}
fn gc() {
    stack.gc()
}
fn force_gc() {
    stack.force_full = true
    stack.gc()
}

fn gc_transfer_item(item: ptr) {
    if item == null {return}
    let vtable = @ptrv(item, u32, -1) & 0xffffff
    if vtable == 0 {
        @ptrv(item, u8, byte_state_rel) = state_solid
        let size : uint = (1 @as uint << @ptrv(item, u8, -1)) + 8
        mem_transfered += size
        let ri = @ptrv(item, u8, -7)
        let data = item - 8 - ri * size
        @ptrv(data, uint, -2)++
    } else {
        let table = @gc_get_vtable(vtable)
        let func = @ptrv(table, fn(ptr, u8)(), vt_transfer)
        func(item, state_solid)
    }
}
fn gc_mark_item(item: ptr) {
    if item == null {return}
    let vtable = @ptrv(item, u32, -1) & 0xffffff
    if vtable == 0 {
        @ptrv(item, u8, byte_age_rel) = stack.age
        let size : uint = (1 @as uint << @ptrv(item, u8, -1)) + 8
        mem_marked += size
    } else {
        let table = @gc_get_vtable(vtable)
        let func = @ptrv(table, fn(ptr, u8)(), vt_mark)
        func(item, stack.age)
    }
}
fn gc_mark_shared_item(item: ptr) {
    if item == null {return}
    let vtable = @ptrv(item, u32, -1) & 0xffffff
    if vtable == 0 {
        @ptrv(item, u8, byte_gc_age_rel) = gc_age
    } else {
        let table = @gc_get_vtable(vtable)
        let func = @ptrv(table, fn(ptr, u8)(), vt_mark_shared)
        func(item, gc_age)
    }
}
fn gc_share(item: ptr) {
    let vtable = @ptrv(item, u32, -1) & 0xffffff
    if vtable == 0 {
        let state = @ptrv(item, u8, byte_state_rel)
        if state > state_solid : return
        @ptrv(item, u8, byte_state_rel) = state_shared
        @ptrv(item, u8, byte_gc_age_rel) = gc_age
        if state < state_solid {
            let size : uint = (1 @as uint << @ptrv(item, u8, -1)) + 8
            mem_transfered += size
            let ri = @ptrv(item, u8, -7)
            let data = item - 8 - ri * size
            @ptrv(data, uint, -2)++
        }
        stack.add_shared(item)
    } else {
        let table = @gc_get_vtable(vtable)
        let func = @ptrv(table, fn(ptr)(), vt_share)
        func(item)
    }
}

#parse_last
fn pools_init() {
    #loop_globals as G, T 
    #if @type_is_generic_of(T, GcPool2)
    G = @class_of(T).init()
    #end
    #endloop
}

#parse_last
fn pools_swap_transfers() {
    #loop_globals as G, T 
    #if @type_is_generic_of(T, GcPool2)
    G.swap_transfers()
    #end
    #endloop
}

#parse_last
fn pools_clean_unmarked(age: u8) {
    #loop_globals as G, T 
    #if @type_is_generic_of(T, GcPool2)
    G.clean_unmarked(age)
    #end
    #endloop
    gc_alloc_clean_unmarked(age)
}

#parse_last
fn pools_reset() {
    #loop_globals as G, T 
    #if @type_is_generic_of(T, GcPool2)
    G.reset()
    #end
    #endloop
    gc_alloc_reset()
}
