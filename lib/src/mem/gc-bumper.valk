
-ns value bump_block_size (1024 * 10)
-ns value bump_private_size (1024 * 2)

-ns global bumper_usage : uint

-ns cstruct GcBumpBlock {
    next: ?GcBumpBlock (null)
    size: uint
    space_left: uint
    start_adr: ptr
    current_adr: ptr

    static fn new(size: uint) GcBumpBlock {
        let data = alloc(size)
        let block = GcBumpBlock {
            size: size
            space_left: size
            start_adr: data
            current_adr: data
        }
        return block
    }

    fn free() {
        free(this.start_adr)
        free(this)
    }
}

-ns cstruct GcBumper {
    first_block_private: ?GcBumpBlock (null)
    last_block_private: ?GcBumpBlock (null)
    first_block: GcBumpBlock
    last_block: GcBumpBlock

    static fn new() GcBumper {
        let block = GcBumpBlock.new(bump_block_size)
        let b = GcBumper{
            first_block: block
            last_block: block
        }
        return b
    }
    

    fn alloc(size: uint) ptr {
        if size > bump_private_size :
            return this.alloc_private(size)

        let block = this.last_block
        let offset : uint = (size > sizeof(ptr)) ? sizeof(ptr) @as uint : size
        
        if (size + offset) > block.space_left {
            let next = block.next
            if isset(next) {
                block = next
            } else {
                let new = GcBumpBlock.new(bump_block_size)
                block.next = new
                block = new
            }
            this.last_block = block
        }

        let adr = block.current_adr
        let skip : uint = adr @as uint % offset
        block.current_adr = adr + size + skip
        block.space_left -= size + skip

        return adr + skip
    }

    fn alloc_private(size: uint) ptr {
        let block = GcBumpBlock.new(size)
        block.space_left = 0

        let last = this.last_block_private
        if isset(last) {
            last.next = block
        } else {
            this.first_block_private = block
        }
        this.last_block_private = block

        return block.start_adr
    }

    fn wipe() {
        let block : ?GcBumpBlock = this.first_block
        while isset(block) {
            let next = block.next
            block.current_adr = block.start_adr
            block.space_left = block.size
            block = next
        }

        this.last_block = this.first_block

        // Private blocks
        block = this.first_block_private
        while isset(block) {
            let next = block.next
            block.free()
            block = next
        }

        this.first_block_private = null
        this.last_block_private = null
    }

}
