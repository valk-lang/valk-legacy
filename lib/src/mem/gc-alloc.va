
-ns global allocators : @ignu(ptr)

fn gc_alloc(size: uint) GcPtr {
    let pow : uint = sizeof(ptr) * 8 - bit_lz(size)
    if pow < 3 : pow = 3
    let res = @ptrv(allocators, GcAlloc, pow).get() @as GcPtr
    return res
}

-ns fn gc_alloc_init() {
    allocators = alloc(sizeof(ptr) * 8 * sizeof(ptr))
    let i : u8 = 3
    let until : u8 = sizeof(ptr) * 8 - 2
    while i < until {
        @ptrv(allocators, GcAlloc, i) = GcAlloc.init(i)
        i++;
    }
}
-ns fn gc_alloc_clean_unmarked(age: u8) {
    let i : u8 = 3
    let until : u8 = sizeof(ptr) * 8 - 2
    while i < until {
        @ptrv(allocators, GcAlloc, i++).clean_unmarked(age)
    }
}
-ns fn gc_alloc_reset() {
    let i : u8 = 3
    let until : u8 = sizeof(ptr) * 8 - 2
    while i < until {
        @ptrv(allocators, GcAlloc, i++).reset()
    }
}

struct GcPtr{}

cstruct GcAlloc {
    blockc: uint
    first: ptr
    block: ptr
    index: uint (0)
    isize: uint (0)
    pow: u8

    static fn init(pow: u8) SELF {
        let isize = (1 @as uint << pow) + 8
        let blockc : uint = 1
        let block = null @as ptr
        return SELF{
            blockc: blockc
            first: block
            block: block
            isize: isize
            pow: pow
        }
    }

    static fn create_block(size: uint, isize: uint, pow: u8) ptr {
        if size > 248 : size = 248
        let b = alloc(size * isize + GP_DATA_OFFSET)
        // Settings
        @ptrv(b, ?ptr, 0) = null // next block
        @ptrv(b, uint, 1) = size // count
        @ptrv(b, uint, 2) = 0 // used
        @ptrv(b, uint, 3) = 0 // usage percent
        // Set indexes
        let data = b + GP_DATA_OFFSET
        let i : u8 = 0
        while i < size {
            let item : ptr = data + i * isize
            @ptrv(item, u8, 0) = state_new
            @ptrv(item, u8, 1) = i
            @ptrv(item, u16, 1) = 0
            @ptrv(item, u32, 1) = 0
            @ptrv(item, u8, 7) = pow
            i++
        }
        return b
    }

    fn get() ptr {
        if mem_usage > 70 {
            gc()
        }

        let isize = this.isize
        if this.block == null {
            this.block = SELF.create_block(this.blockc * 2, isize, this.pow)
            this.first = this.block
        }

        while true {
            let block = this.block
            if @ptrv(block, uint, 3) > 40 {
                this.set_next_block(block)
                continue
            }
            let index = this.index
            if index == @ptrv(block, uint, 1) {
                this.set_next_block(block)
                continue
            }
            this.index++
            let data = block + GP_DATA_OFFSET
            let item = data + index * isize
            if @ptrv(item, u8, byte_state) != state_new {
                continue
            }

            // #if @type_has_method(T, _gc_free)
            // @ptrv(item, u8, byte_state) = state_used
            // #end

            // Increase mem usage
            mem_new += isize

            return (item + 8)
        }
        print("Failed to allocate memory")
        print("\n")
        exit(1)
    }

    fn set_next_block(block: ptr) {
        let next = @ptrv(block, ?ptr, 0)
        if isset(next) {
            this.set_block(next)
        } else {
            // Create new block
            let blockc = ++this.blockc
            let new = SELF.create_block(blockc * blockc, this.isize, this.pow)
            // Set next
            @ptrv(block, ptr, 0) = new
            this.set_block(new)
        }

        // Check mem usage
        mem_usage = mem_new * 100 / mem_marked
    }

    fn set_block(block: ptr) {
        this.block = block
        this.index = 0
    }

    // fn swap_transfers() {
    //     #if @type_has_method(T, _gc_free)
    //     let current = this.block
    //     let block = this.first
    //     let isize = this.isize

    //     while block != current {
    //         let b = block
    //         let count = @ptrv(b, uint, 1)
    //         // Loop items
    //         let i : uint = 0
    //         let data = b + GP_DATA_OFFSET
    //         while i < count {
    //             let item = data + i * isize
    //             if @ptrv(item, u8, byte_state) == state_used {
    //                 ((item + 8) @as T)._gc_free()
    //                 @ptrv(item, u8, byte_state) = state_new
    //             }
    //             i++
    //         }

    //         block = @ptrv(block, ptr, 0)
    //     }

    //     let index = this.index
    //     let i : uint = 0
    //     let data = current + GP_DATA_OFFSET
    //     while i < index {
    //         let item = data + i * isize
    //         if @ptrv(item, u8, byte_state) == state_used {
    //             ((item + 8) @as T)._gc_free()
    //             @ptrv(item, u8, byte_state) = state_new
    //         }
    //         i++
    //     }
    //     #end
    // }

    fn clean_unmarked(age: u8) {
        let current = this.block
        let block = this.first
        let isize = this.isize

        while block != null {
            let b = block
            let count = @ptrv(b, uint, 1)
            if count > 0 {
                let used = @ptrv(b, uint, 2)
                // Loop items
                let i : uint = 0
                let data = b + GP_DATA_OFFSET

                while i < count {
                    let item = data + i * isize
                    let iage = @ptrv(item, u8, byte_age)
                    if iage != age && @ptrv(item, u8, byte_state) == state_solid {
                        // #if @type_has_method(T, _gc_free)
                        // ((item + 8) @as T)._gc_free()
                        // #end
                        @ptrv(item, u8, byte_state) = state_new
                        @ptrv(item, u16, 1) = 0
                        used--
                    }
                    i++
                }

                @ptrv(b, uint, 2) = used
                @ptrv(b, uint, 3) = used * 100 / count
            }

            block = @ptrv(b, ptr, 0) // next block
        }
    }

    fn reset() {
        // Update usage percentage
        let current = this.block
        if current == null : return
        let first = this.first
        let block = first
        let prev = first
        while true {
            let b = block
            let count = @ptrv(b, uint, 1)
            let used = @ptrv(b, uint, 2)
            @ptrv(b, uint, 3) = used * 100 / count
            if b == current : break
            block = @ptrv(b, ptr, 0)
        }

        // Free unused blocks after current
        block = @ptrv(current, ptr, 0)
        prev = current
        while block != null {
            let b = block
            let used = @ptrv(b, uint, 2)
            let next = @ptrv(b, ptr, 0)

            if used == 0 {
                @ptrv(prev, ptr, 0) = next
                free(b)
                block = next
                this.blockc--
                continue
            }
            prev = b
            block = next
        }
        //
        this.set_block(this.first)
    }
}
