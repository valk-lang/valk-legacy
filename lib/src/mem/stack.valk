
@ignore_access_types

use mem
use os
use io
use core

global stack : @ignu(Stack)
global run_gc : bool

global mem_new : uint
global mem_marked : uint
global mem_trigger : uint
global mem_active : uint
global mem_usage : uint
global mem_free_able : uint

global mem_max : uint
global mem_min : uint

global mem_depth : uint
global mem_skip : uint

global mem_gc_loop : bool
global mem_cc : uint

value mem_trigger_default (10000)

value state_new (0)
value state_used (1)
value state_transfer (2)
value state_solid (4)
value state_const (8)
value state_shared (10)
value state_delete (12)
value stack_size (10000)

value vt_hook_transfer (0)
value vt_hook_mark (1)
value vt_hook_mark_shared (2)
value vt_hook_share (3)
value vt_hook_free (4)

value byte_state (0)
value byte_age (1)
value byte_shared_age (2)
value byte_block_index (3)

// value byte_state_rel (-8)
// value byte_age_rel (-7)
// value byte_shared_age_rel (-6)
// value byte_block_index_rel (-5)

shared stack_count: uint

global stack_pos: @ignu(StackPos)
global main_stack_pos: @ignu(StackPos)

cstruct StackPos {
    base: ptr
    adr: ptr
    // min: uint (0)
    size: uint
    fn free() {
        free(this.base)
        free(this)
    }
}
fn create_stack() StackPos {
    let base = calloc(stack_size)
    return StackPos { 
        base: base
        adr: base
        size: stack_size
    }
}

cstruct Stack {
    // id: uint

    transfer : ObjectChain
    rc_checks : ObjectChain
    shared : GcRing
    lock : GcLock
    bump: GcBumper (GcBumper.new())

    globals: ptr (null @as ptr)
    globalc: uint (0)

    age: u8 (33)
    shared_age: u8 (0)

    run_gc_ref: ptr
    bumper_overflow: bool (false)

    force_full: bool (false)
    stopped: bool (false)

    static fn init() {

        mem_min = 1000

        gc_alloc_init()
        // let id = atomic(stack_count + 1)

        let pos = create_stack()
        stack_pos = pos
        main_stack_pos = pos

        let s = Stack {
            // id: id
            transfer: ObjectChain.new()
            rc_checks: ObjectChain.new()
            shared: GcRing.new()
            lock: GcLock.new()
            run_gc_ref: @ptr_of(run_gc)
        }

        stack = s
        run_gc = false
        mem_trigger = mem_trigger_default
        mem_max = 128

        init_pools()

        s.scan_globals()

        let gcm = gc_manager()
        gcm.add_stack(s)

        core:g_coros = Array[?core:Coro].new()
        core:g_coro_indexes = Pool[uint].new()
    }

    #parse_last
    fn scan_globals() {
        let count : uint = 0
        #loop_globals as G, T
        #if @type_is_gc(T) && !@global_is_shared(G)
        count++
        #end
        #endloop

        let globals = alloc(sizeof(ptr) * count)
        let globalc = count
        count = 0
    
        #loop_globals as G2, T2
        #if @type_is_gc(T2) && !@global_is_shared(G2)
        @ptrv(globals, ptr, count++) = @ptr_of(G2)
        #end
        #endloop
    }

    ///////////////////////
    // Runtime functions
    ///////////////////////
    static fn link(on: ptr, to: ptr) {
        let to_state = @ptrv(to, u8, byte_state)
        let on_state = @ptrv(on, u8, byte_state)
        if on_state == state_shared {
            if to_state != state_shared {
                gc_share(to)
            } else {
                gc_mark_shared(to, shared_age)
            }
            return
        }
        if to_state < state_transfer {
            // Transfer
            stack.transfer.add_item(to)
            @ptrv(to, u8, byte_state) = state_transfer
        }
    }

    // If on.state >= solid && item.rc == 0
    static fn rc_check(item: ptr) {
        stack.rc_checks.add_item(item)
    }

    ///////////////////////
    // Gc
    ///////////////////////
    fn gc() {
        this.lock.lock()

        mem_new = 0
        mem_usage = 0
        run_gc = false
        mem_gc_loop = false

        this.mark_difference_down()
        this.handle_transfer_list()
        // pools_swap_transfers()
        this.rc_down_stack()

        let transfer_percent = mem_active / (mem_trigger / 100)
        // print("M")
            // this.update_age()
            // this.mark_stack_age()

        // Full clear
        if transfer_percent > 160 || this.force_full {

            // Reset counters
            // let marked_before = mem_marked
            mem_marked = 0
            // Mark
            this.update_age()
            this.mark_stack_age()

            // Clean
            // let free_able = mem_active - mem_marked
            // let total_free_able = free_able + mem_free_able
            // if total_free_able > mem_marked / 10 || this.force_full {
                // Clean
                print("a.")
                pools_clean_unmarked(this.age)
                mem_free_able = 0
            // } else {
            //     print("b.")
            //     mem_free_able += free_able
            // }
            
            // let largest = mem_marked
            // if mem_marked >= marked_before {
                // mem_trigger = mem_marked
            // } else {
            //     mem_trigger = (mem_marked + marked_before * 3) / 4
            // }
            // mem_trigger += mem_trigger_default
            mem_trigger = mem_active + mem_trigger_default

            this.force_full = false
        } else {
            print("-")
        }
        pools_reset()

        // Mark shared
        if shared_age != this.shared_age {
            let age = shared_age
            this.mark_stack_shared_age(age)
            this.shared_age = age
        }

        this.lock.unlock()
    }

    #parse_last
    fn mark_difference_down() {
        //
        let transfer = this.transfer

        // Globals
        #loop_globals as G, T
        #if @type_is_gc(T) && !@global_is_shared(G)
        {
            let g = G @as ptr
            if g != null {
                let state = @ptrv(g, u8, byte_state)
                if state < state_transfer {
                    // Transfer new items
                    transfer.add_item(g)
                    @ptrv(g, u8, byte_state) = state_transfer
                } 

                // RC UP
                @ptrv(g, u32, 1)++
            }
        }
        #end
        #endloop

        // Stack
        let pos = main_stack_pos
        let stack_base = pos.base
        let stack_adr = pos.adr

        // Mark new items as transfer
        let adr = stack_adr
        while adr > stack_base {
            let item_adr = adr - sizeof(ptr) * 2
            adr = item_adr
            let item = @ptrv(item_adr, ptr, 0)
            if item != null {
                //
                let state = @ptrv(item, u8, byte_state)
                if state < state_transfer {
                    // Transfer new items
                    transfer.add_item(item)
                    @ptrv(item, u8, byte_state) = state_transfer
                } 

                // RC UP
                @ptrv(item, u32, 1)++
            }
        }

        // Coroutines
        core:Coro.transfer_check()
    }

    #parse_last
    fn rc_down_stack() {
        // Globals
        #loop_globals as G, T
        #if @type_is_gc(T) && !@global_is_shared(G)
        {
            let g = G @as ptr
            if g != null {
                // RC DOWN
                @ptrv(g, u32, 1)--
            }
        }
        #end
        #endloop

        // Stack
        let pos = main_stack_pos
        let stack_base = pos.base
        let stack_adr = pos.adr

        // Check & update previous items
        let adr = stack_adr
        while adr > stack_base {
            let item_adr = adr - sizeof(ptr) * 2
            adr = item_adr
            let prev = @ptrv(item_adr, ptr, 1)
            if prev != null {
                // RC check
                let rc = @ptrv(prev, u32, 1)
                if rc == 0 {
                    gc_free(prev)
                }
            }

            @ptrv(item_adr, ptr, 1) = @ptrv(item_adr, ptr, 0)
        }

        // Deref stack items
        adr = stack_adr
        while adr > stack_base {
            let item_adr = adr - sizeof(ptr) * 2
            adr = item_adr
            let item = @ptrv(item_adr, ptr, 0)
            if item != null {
                // RC DOWN
                @ptrv(item, u32, 1)--
            }
        }

        // Coroutines
        core:Coro.deref_stack()
    }

    fn handle_transfer_list() {
        let chain = this.transfer
        let last_list = chain.olist_last
        let last_index = chain.index
        let first_list = chain.olist_first
        let next_list = first_list

        // Mark solid
        while true {
            let list = next_list
            let index : uint = 0
            let is_last = list == last_list
            let until_ : uint = chain_size
            if is_last {
                until_ = last_index
            }
            let until = until_
            while index < until {
                let item = @ptrv(list, ptr, index)
                index++
                // Item logic
                if @ptrv(item, u8, byte_state) != state_transfer {
                    continue
                }

                gc_transfer(item)
            }
            if is_last {
                break
            }
            next_list = @ptrv(list, ptr, chain_size)
            if next_list == null {
                break
            }
        }

        chain.wipe()
    }

    fn update_age() {
        let age : u8 = 64
        if this.age == 64 {
            age = 66
        }
        this.age = age
    }

    #parse_last
    fn mark_stack_age() {
        let age = this.age
        // Globals
        #loop_globals as G, T
        #if @type_is_gc(T) && !@global_is_shared(G)
        {
            let item = G @as ptr
            if item != null {
                if @ptrv(item, u8, byte_state) < state_const {
                    if @ptrv(item, u8, byte_age) != age {
                        gc_mark(item, age)
                    }
                }
            }
        }
        #end
        #endloop
        // Stack
        let pos = main_stack_pos
        let item_adr = pos.base
        let stack_adr = pos.adr
        while item_adr < stack_adr {
            let item = @ptrv(item_adr, ptr)
            item_adr += sizeof(ptr) * 2
            if item != null {
                if @ptrv(item, u8, byte_state) < state_const {
                    if @ptrv(item, u8, byte_age) != age {
                        gc_mark(item, age)
                    }
                }
            }
        }
    }
    fn mark_stack_shared_age(age: u8) {
        // Globals
        let globals = this.globals
        let globalc = this.globalc
        while globalc-- > 0 {
            let ref = @ptrv(globals, ptr, globalc)
            let item = @ptrv(ref, ptr)
            if item != null {
                if @ptrv(item, u8, byte_shared_age) != age {
                    gc_mark_shared(item, age)
                }
            }
        }
        // Stack
        let pos = main_stack_pos
        let item_adr = pos.base
        let stack_adr = pos.adr
        while item_adr < stack_adr {
            let item = @ptrv(item_adr, ptr)
            if item != null {
                if @ptrv(item, u8, byte_shared_age) != age {
                    gc_mark_shared(item, age)
                }
            }
            item_adr += sizeof(ptr) * 2
        }
    }

    fn add_shared(item: ptr) {
        let ring = this.shared
        ring.lock.lock()
        ring.add(item)
        ring.lock.unlock()
    }
    fn clean_shared() {
        let ring = this.shared
        ring.lock.lock()
        let tail = ring.tail
        let head = ring.head
        let size = ring.size
        let data = ring.data
        let age = shared_age
        while tail != head {
            let item = @ptrv(data, ptr, tail)
            let item_age = @ptrv(item, u8, byte_shared_age)
            if item_age != age {
                // Free item
                @ptrv(item, u8, byte_state) = state_solid
                ring.remove(tail)
            }

            tail++
            if tail == size {
                tail = 0
            }
        }
        ring.lock.unlock()
    }

    fn shutdown() {
        //
        this.force_full = true
        let pos = main_stack_pos
        pos.adr = pos.base
        this.gc()
        //
        this.transfer.delete()

        //GcPool.delete_all()
        // TODO: delete pools

        // Stack is deleted by the Gc
        this.stopped = true
    }


    fn print() {
        print("---------\n")
        let pos = main_stack_pos
        let item_adr = pos.base
        let stack_adr = pos.adr
        while item_adr < stack_adr {
            let item = @ptrv(item_adr, ptr)
            item.print()
            print("\n")
            item_adr += sizeof(ptr) * 2
        }
        print("---------\n")
    }
}

