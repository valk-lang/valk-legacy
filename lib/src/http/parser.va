
@ignore_access_types

use utils
use mem
use io
use fs

struct RequestParser {
    stage: uint (0)
    input: utils:ByteBuffer (utils:ByteBuffer.new(8192))
    chunks: utils:ByteBuffer (utils:ByteBuffer.new(8192))
    input_pos: uint (0)
    headers_length: uint (0)
    content_length: uint (0)
    parsed_headers: bool (false)
    parsed_body: bool (false)
    chunked: bool (false)

    fn full_reset() {
        this.input_pos = 0
        this.input.clear()
        this.soft_reset()
    }

    fn soft_reset() {
        let input = this.input
        let pos = this.input_pos
        if pos >= input.length {
            this.input_pos = 0
            input.clear()
        }
        this.chunks.clear()
        this.stage = 0
        this.headers_length = 0
        this.content_length = 0
        this.parsed_headers = false
        this.parsed_body = false
        this.chunked = false
    }

    fn parse(request: Request, is_response: bool) !invalid !http413 !incomplete {

        if this.parsed_body {
            throw invalid
        }

        let input = this.input
        let pos = this.input_pos

        let stage = this.stage
        let data = input.data
        let length = input.length

        let header_data = request.header_data

        // Header
        if stage == 0 {
            let index = input.byte_index_of_byte('\r', pos) ! {
                if length - pos > 4096 {
                    throw http413
                }
                throw incomplete
            }

            let version = ""

            if is_response {
                let line = input.sub_str(pos, index - pos)
                let split = line.split(" ")
                if split.length < 2 : throw invalid
                version = split.get(0) ? ""
                let status = split.get(1) ? ""
                request.status = status.to_uint() ! throw invalid

            } else {
                if index + 1 == length : throw incomplete
                if @ptrv(data, u8, index + 1) != '\n' { throw invalid }

                let space1 = input.byte_index_of_byte(' ', pos) ! { throw invalid }
                let space2 = input.byte_index_of_byte(' ', space1 + 1) ! { throw invalid }

                if space1 > index { throw invalid }
                if space2 > index { throw invalid }

                // Request "GET / HTTP/1.1"

                let method = input.sub_str(pos, space1 - pos)
                let path = input.sub_str(space1 + 1, space2 - space1 - 1)

                let qmark = path.byte_index_of_byte('?') ? 0
                if qmark > 0 {
                    let len = path.bytes
                    request.params_data = path.byte_sub_str(qmark + 1, len - qmark - 1)
                    path = path.byte_sub_str(0, qmark)
                }
                version = input.sub_str(space2 + 1, index - space2 - 1)

                request.method = method
                request.path = path
            }

            pos = index + 2
            this.input_pos = pos
            stage = 1
            this.stage = stage
        }

        // Headers
        let headers = request.headers_
        while stage == 1 {
            let index = input.byte_index_of_byte('\r', pos) ! {
                if input.length - pos > 4096 {
                    throw http413
                }
                throw incomplete
            }
            if index + 1 == length : throw incomplete
            if @ptrv(data, u8, index + 1) != '\n' { throw invalid }

            if index == pos {
                // End of headers
                pos = index + 2
                this.input_pos = pos
                stage = 2
                this.stage = stage
                this.parsed_headers = true

                // this.content_length = (headers.get("content-length") ? "0").to_uint() ! throw invalid
                // if (headers.get("transfer-encoding") ? "") == "chunked" {
                //     this.chunked = true
                //     this.content_length = 0
                // }
                break
            }

            let key_adr = input.data + pos
            let header_len = index - pos
            if header_len > 4095 : throw http413
            header_data.append_from_ptr(key_adr, index - pos)

            let headers_length = this.headers_length + header_len
            if headers_length > 8192 : throw http413
            this.headers_length = headers_length

            // let split = input.byte_index_of_byte(':', pos) ! { throw invalid }
            // if split > index { throw invalid }
            // while @ptrv(data, u8, split + 1) == ' ' {
            //     split++
            // }

            // let key_len = split - pos - 1
            // let value_len = index - split - 1
            // if key_len > 4095 || value_len > 4095 : throw http413

            // let key_adr = input.data + pos
            // let value_adr = input.data + split + 1
            // Convert key to lowercase

            let h1 = "content-length"
            let h2 = "transfer-encoding"
            if header_len > h1.bytes && @ptrv(key_adr, u8, h1.bytes) == ':' {
                mem:ascii_bytes_to_lower(key_adr, h1.bytes)
                if mem:equal(key_adr, h1.data_ptr(), h1.bytes) {
                    let value_adr = key_adr + h1.bytes;
                    while @ptrv(value_adr, u8) == ' ' : value_adr += 1
                    let value_len = ((input.data + index) - value_adr) @as uint
                    let content_len = mem:bytes_to_uint(value_adr, value_len) ! { throw invalid }
                    this.content_length = content_len
                }
            } else if header_len > h2.bytes && @ptrv(key_adr, u8, h2.bytes) == ':' {
                mem:ascii_bytes_to_lower(key_adr, h2.bytes)
                if mem:equal(key_adr, h2.data_ptr(), h2.bytes) {
                    let value_adr = key_adr + h1.bytes;
                    while @ptrv(value_adr, u8) == ' ' : value_adr += 1
                    let v = "chunked"
                    if mem:equal(value_adr, v.data_ptr(), v.bytes) {
                        this.chunked = true
                        this.content_length = 0
                    }
                }
            }

            pos = index + 2
            this.input_pos = pos
        }

        if stage == 2 {
            let content_len = this.content_length
            let chunked = this.chunked
            let bytes_left = length - pos

            if chunked {
                let chunks = this.chunks

                while true {
                    // Read length line
                    let chlen = this.content_length
                    if chlen == 0 {
                        let index = input.byte_index_of_byte('\r', pos) ! {
                            if bytes_left > 16 { 
                                throw invalid
                            }
                            throw incomplete
                        }
                        let line = input.sub_str(pos, index - pos)
                        let len = (line.hex_to_uint() ! throw invalid) + 2

                        pos = index + 2
                        this.input_pos = pos
                        bytes_left = length - pos

                        if len == 2 { 
                            pos += 2
                            this.input_pos += 2
                            break
                        }

                        chlen = len
                        this.content_length = len
                    }
                    // Read chunk content
                    if bytes_left < chlen : throw incomplete

                    chunks.append_from_ptr(input.data + pos, chlen - 2)
                    input.clear_until(pos + chlen)

                    this.content_length = 0
                    pos = 0
                    this.input_pos = 0
                    bytes_left = length - (pos + chlen)
                }

                this.parsed_body = true
                request.body = chunks.to_string()
                this.stage = 3
                chunks.clear()

            } else {
                // Non chunked
                if bytes_left < content_len : throw incomplete

                let body = input.sub_str(pos, content_len)

                pos += content_len
                this.parsed_body = true
                request.body = body
                this.stage = 3

                this.input_pos = pos
            }
        }
    }
}
