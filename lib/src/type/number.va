
header "sys" as sys

use valk:mem
use valk:io

global str_buf : ?ptr
global str_rev : ?ptr

trait Number {

    fn _string() String {
        return this.to_base(10)
    }
    fn to_str() String {
        return this.to_base(10)
    }
    fn to_hex() String {
        return this.to_base(16)
    }

    fn round_up(modulo: SELF) SELF {
        return this + ((modulo - (this % modulo)) % modulo)
    }
    fn round_down(modulo: SELF) SELF {
        return this - (this % modulo)
    }

    fn to_base(base: SELF) String {

        if this == 0 || base == 0 : return "0"

        if str_buf == null : str_buf = mem:alloc(24)
        let buf = str_buf @as ptr
        let len = this.to_base_to_ptr(base, buf)

        return String.make_from_ptr(buf, len)
    }

    fn to_base_to_ptr(base: SELF, result: ptr) uint {

        let chars = "0123456789ABCDEF".data_ptr()

        if str_rev == null {
            str_rev = mem:alloc(24)
        }
        let rev = str_rev
        let val = this
        let negative = false
        #if @type_is_signed(SELF)
        if val < 0 {
            negative = true
            val = val * -1
        }
        #end

        let i : uint = 0
        while val > 0 {
            @ptrv(rev, u8, i) = @ptrv(chars, u8, (val % base))
            i++
            val = val / base
        }
        // Set len
        if i == 0 {
            @ptrv(result, u8, 0) = '0'
            return 1
        }
        let len = i
        #if @type_is_signed(SELF)
        if negative {
            len++
            @ptrv(result, u8, 0) = '-'
        }
        #end
        // Reverse
        let amount = i
        let offset : uint = negative ? 1 @as uint : 0 @as uint
        while i-- > 0 {
            @ptrv(result, u8, i + offset) = @ptrv(rev, u8, amount - i - 1)
        }

        return len
    }

    fn print(base: SELF) {

        if str_buf == null : str_buf = mem:alloc(24)
        let buf = str_buf @as ptr
        let len = this.to_base_to_ptr(base, buf)

        io:write_from_ptr(1, buf, len) ? 0
    }
}
