
use mem
use io

struct ByteBuffer {
    ~ data: ptr
    ~ size: uint
    length: uint (0)

    static fn new(start_size: uint) SELF {
        if start_size < 10 {
            start_size = 10
        }
        let res = SELF {
            data: mem:alloc(start_size),
            size: start_size,
        }
        return res
    }

    fn _gc_free() {
        mem:free(this.data)
    }

    fn clear() {
        this.length = 0
    }
    fn clear_until(index: uint) {
        let len = this.length
        if index >= len {
            this.length = 0
            return
        }
        let data = this.data
        let bytes = len - index
        mem:copy(@ptr_offset(data, index), data, bytes)
        this.length = bytes
    }

    // Appending
    fn append(buffer: SELF) {
        this.append_from_ptr(buffer.data, buffer.length)
    }

    fn append_from_ptr(data: ptr, length: uint) {
        if length == 0 : return
        let bytes : uint = this.length
        let new_bytes : uint = bytes + length
        this.minimum_size(new_bytes)
        let to : ptr = this.data + bytes
        // TODO: use @ptr_offset
        mem:copy(data, to, length)
        this.length = new_bytes
    }

    fn append_byte(byte: u8) {
        let bytes : uint = this.length
        let new_bytes : uint = bytes + 1
        if new_bytes > this.size {
            this.minimum_size(new_bytes)
        }
        @ptrv(this.data, u8, bytes) = byte
        this.length = new_bytes
    }

    fn append_str(str: String) {
        this.append_from_ptr(str.data_ptr(), str.bytes)
    }
    fn append_uint(value: uint) {
        this.minimum_free_space(64)
        let len = value.to_base_to_ptr(10, this.data + this.length)
        this.length += len
    }
    fn append_int(value: int) {
        this.minimum_free_space(64)
        let len = value.to_base_to_ptr(10, this.data + this.length)
        this.length += len
    }

    // Compare

    // fn eq_str(str: String) bool {
    // 	let str_len = str.bytes
    // 	let len = this.length
    // 	if str_len != len {
    // 		return false
    // 	}
    // 	return mem:equal(this.data, str.data, len)
    // }

    // Find

    fn byte_index_of_byte(byte: u8, start_index: uint (0)) uint !not_found {
        let index = start_index
        let len = this.length
        let data = this.data
        while index < len {
            let ch = @ptrv(data, u8, index)
            if ch == byte {
                return index
            }
            index++
        }
        throw not_found
    }

    fn index_where_byte_is_not(byte: u8, start_index: uint (0)) uint !not_found {
        let index = start_index
        let len = this.length
        let data = this.data
        while index < len {
            let ch = @ptrv(data, u8, index)
            if ch != byte {
                return index
            }
            index++
        }
        throw not_found
    }

    /////////////////////////
    // String functions
    /////////////////////////

    fn to_string() String {
        if(this.length == 0){
            return ""
        }
        let str = String.make_empty(this.length)
        mem:copy(this.data, str.data_ptr(), this.length)
        return str
    }

    fn sub_str(start_index: uint, length: uint) String {
        let len = this.length
        if length == 0 {
            return ""
        }
        if start_index >= len {
            return ""
        }
        if start_index + length > len {
            length = len - start_index
        }
        let str = String.make_empty(length)
        mem:copy(@ptr_offset(this.data, start_index), str.data_ptr(), length)
        return str
    }

    // 
    fn minimum_free_space(length: uint) {
        this.minimum_size(this.length + length)
    }
    fn minimum_size(minimum_size: uint) {
        let size : uint = this.size
        let new_size : uint = size
        while new_size < minimum_size {
            new_size *= 2
        }
        if(new_size != size){
            let data = this.data
            let adr : ptr = mem:alloc(new_size)
            mem:copy(data, adr, this.length)
            mem:free(data)
            this.size = new_size
            this.data = adr
        }
    }
}
