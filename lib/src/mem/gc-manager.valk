
use mem
use os
use io

shared gc_manager_instance : @ignu(GcManager)
shared shared_age : u8

fn gc_manager() GcManager {
    let gc = gc_manager_instance
    while gc == null {
        gc = gc_manager_instance
    }
    return gc @as GcManager
}

cstruct GcManager {
    stacks : ptr
    stack_count : uint (0)
    free_index : uint(0)
    free_index_lock : uint (0)
    has_free_index : bool (false)
    stop : bool (false)
    stopped : bool (false)

    static fn init() {
        shared_age = 128
        if gc_manager_instance != null {
            return
        }
        gc_manager_instance = GcManager {
            stacks: mem:alloc(2000 * sizeof(ptr))
        }
        os:Thread.start_without_gc(GcManager.loop @as ptr)
    }

    fn add_stack(s: Stack) {
        let index : uint = 0
        let has_index = false
        // if(this.has_free_index) {
        //     let lock = atomic(this.free_index_lock + 1)
        //     if lock == this.free_index {
        //         index = lock
        //         has_index = true
        //         atomic(this.free_index_lock - lock)
        //         this.has_free_index = false
        //     } else {
        //         atomic(this.free_index_lock - 1)
        //     }
        // }
        if has_index == false {
            index = atomic(this.stack_count + 1)
        }
        @ptrv(this.stacks, Stack, index) = s
    }

    static fn loop() {
        return

        os:sleep_ms(500)
        Stack.init()
        let gcm_stack = stack

        let gm = gc_manager_instance
        let stacks = gm.stacks
        let timeout_count : uint = 0

        // Remove GCman stack
        // let si = gm.stack_count
        // while si-- > 0 {
        //     let s = @ptrv(stacks, ?Stack, si)
        //     if s == gcm_stack {
        //         @ptrv(stacks, ?Stack, si) = null
        //         break
        //     }
        // }

        //
        while true {
            //
            let sc = gm.stack_count
            let up_to_date_count : uint = 0
            let age = shared_age

            if gcm_stack.shared_age != age {
                force_gc()
            }

            // Loop stacks
            let si = sc
            while si-- > 0 {
                let s = @ptrv(stacks, Stack, si)
                // if s @as ?Stack == null {
                //     up_to_date_count++
                //     if gm.has_free_index == false {
                //         gm.free_index = si
                //         atomic(gm.free_index_lock + si)
                //         gm.has_free_index = true
                //     }
                //     continue
                // }
                if s.shared_age == age {
                    up_to_date_count++
                }
                // if s.stopped {
                //     @ptrv(stacks, ?Stack, si) = null
                //     free(s @as ptr)
                //     continue
                // }
            }

            // If all up-to-date
            if up_to_date_count == sc {
                gm.clean_unused()
                shared_age = (shared_age == 128) ? 64 : 128
                timeout_count = 0
            } else {
                timeout_count++
                if timeout_count > 4 {
                    let si = sc
                    while si-- > 0 {
                        let s = @ptrv(stacks, ?Stack, si)
                        if isset(s) {
                            if s.shared_age == age {
                                continue
                            }
                            s.force_full = true
                            @ptrv(s.run_gc_ref, bool) = true
                        }
                    }

                    timeout_count = 0
                }
            }

            //
            os:sleep_ms(100)
        }
    }

    #parse_last
    fn clean_unused() {
        let age = shared_age
        // Mark shared globals
        #loop_globals as G, T
        #if @type_is_gc(T) && @global_is_shared(G)
        {
            let item = G @as ptr
            #if @type_is_nullable(T)
            if item != null {
                if @ptrv(item, u8, byte_shared_age) != age {
                    gc_mark_shared(item)
                }
            }
            #else
            if @ptrv(item, u8, byte_shared_age) != age {
                gc_mark_shared(item)
            }
            #end
        }
        #end
        #endloop

        // Clean
        let stacks = this.stacks
        let si = this.stack_count
        while si-- > 0 {
            let s = @ptrv(stacks, ?Stack, si)
            if isset(s) {
                s.clean_shared()
            }
        }
    }

    fn shutdown() {
        this.stop = true
    }
}
