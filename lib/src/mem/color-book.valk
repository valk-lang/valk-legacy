
cstruct ColorBook {
    pool: ptr
    state: ptr
    size: uint
    count: u16 (0)
    next: u16 (2)

    static fn new() SELF {
        let size: uint = 256 
        return SELF {
            pool: alloc(size * sizeof(u16))
            state: calloc(size)
            size: size
        }
    }

    fn get() u16 {
        if this.count > 0 {
            let i = this.count - 1
            this.count = i
            let c = @ptrv(this.pool, u16, i)
            @ptrv(this.state, u8, c) = 1
            return c
        }
        let c = this.next++
        // Enable color
        @ptrv(this.state, u8, c) = 1
        // Allocate more colors if needed
        if c == this.size {
            let size = this.size
            let new_size = size * 2
            this.pool = resized_clone_and_free(this.pool, size * sizeof(u16), new_size * sizeof(u16))
            this.state = resized_clone_and_free(this.state, size, new_size)
            clear(this.state + size, size)
            this.size = new_size
        }
        //
        return c
    }

    fn giveback(color: u16) {
        let i = this.count++
        @ptrv(this.pool, u16, i) = color
    }
}