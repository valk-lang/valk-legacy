
-ns value chain_size (1000)

-ns cstruct ObjectChain {
    olist_first : ptr
    olist_last : ptr
    index : uint (0)
    itemc : uint (0)

    static fn new() ObjectChain {
        let list = ObjectChain.new_olist()
        return ObjectChain {
            olist_first: list
            olist_last: list
        }
    }

    static fn new_olist() ptr {
        let list = alloc((chain_size + 1) * sizeof(ptr))
        @ptrv(list, ?ptr, chain_size) = null
        return list
    }

    fn add_item(item: ptr) {
        let index_ = this.index
        if index_ == chain_size {
            let last_list = this.olist_last
            let next = @ptrv(last_list, ptr, chain_size)
            if next == null {
                next = ObjectChain.new_olist()
                @ptrv(last_list, ptr, chain_size) = next
            }
            this.olist_last = next
            this.index = 0
        }
        let list = this.olist_last
        let index = this.index
        @ptrv(list, ptr, index) = item
        this.index = index + 1
        this.itemc++
    }

    fn wipe() {
        this.olist_last = this.olist_first
        this.index = 0
        this.itemc = 0
    }

    fn delete() {
        let block = this.olist_first
        while block != null {
            let next = @ptrv(block, ptr, chain_size)
            free(block)
            block = next
        }
        free(this @as ptr)
    }
}
